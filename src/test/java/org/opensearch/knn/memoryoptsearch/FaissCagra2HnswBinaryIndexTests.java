/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

package org.opensearch.knn.memoryoptsearch;

import org.opensearch.knn.index.KNNVectorSimilarityFunction;
import org.opensearch.knn.index.VectorDataType;

public class FaissCagra2HnswBinaryIndexTests extends AbstractFaissCagraHnswIndexTests {

    public void testKNNSearchBinary() {
        // Exhaustive search test
        doTestKNNSearch(true, VectorDataType.BINARY, KNNVectorSimilarityFunction.HAMMING);

        // ANN search test
        doTestKNNSearch(false, VectorDataType.BINARY, KNNVectorSimilarityFunction.HAMMING);
    }

    public void testLoadVectors() {
        doTestLoadVectors(VectorDataType.BINARY, FIRST_VECTOR, LAST_VECTOR);
    }

    @Override
    protected String getBinaryDataRelativePath() {
        return "data/memoryoptsearch/faiss_cagra2_flat_binary_300_vectors_768_dims.bin";
    }

    private static final byte[] FIRST_VECTOR = new byte[] {
        116,
        -96,
        124,
        34,
        -95,
        -77,
        58,
        -51,
        -99,
        -119,
        106,
        -63,
        -40,
        52,
        85,
        -11,
        103,
        8,
        -31,
        89,
        69,
        -6,
        -115,
        56,
        56,
        -103,
        -114,
        112,
        52,
        73,
        -31,
        -17,
        -108,
        105,
        -14,
        -67,
        -35,
        42,
        -121,
        110,
        -59,
        -66,
        -117,
        0,
        -16,
        55,
        -13,
        30,
        8,
        -105,
        -79,
        108,
        18,
        -21,
        -58,
        -106,
        6,
        -89,
        -91,
        -16,
        -8,
        -120,
        -62,
        83,
        -66,
        65,
        84,
        -54,
        -55,
        106,
        114,
        -87,
        -17,
        75,
        55,
        -92,
        10,
        -51,
        61,
        -48,
        78,
        -114,
        -71,
        81,
        120,
        2,
        95,
        40,
        22,
        -51,
        83,
        114,
        -97,
        92,
        -40,
        24, };

    private static final byte[] LAST_VECTOR = new byte[] {
        8,
        46,
        101,
        -7,
        110,
        102,
        -106,
        -45,
        -108,
        -117,
        114,
        -91,
        58,
        -71,
        -108,
        40,
        107,
        -3,
        79,
        -114,
        -75,
        -70,
        -60,
        -73,
        -47,
        -78,
        109,
        115,
        -100,
        -97,
        -84,
        -4,
        114,
        42,
        95,
        -31,
        -43,
        -121,
        -2,
        81,
        -55,
        23,
        80,
        72,
        -39,
        71,
        102,
        -7,
        -74,
        56,
        72,
        -100,
        90,
        -108,
        18,
        75,
        -117,
        115,
        5,
        92,
        -45,
        61,
        1,
        4,
        -96,
        56,
        50,
        61,
        19,
        8,
        46,
        25,
        9,
        84,
        -58,
        84,
        59,
        87,
        -91,
        -65,
        34,
        -33,
        -35,
        -62,
        57,
        -119,
        -74,
        99,
        -46,
        59,
        124,
        -118,
        -124,
        55,
        -126,
        -55, };
}
