/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

package org.opensearch.knn.memoryoptsearch;

import org.opensearch.knn.index.KNNVectorSimilarityFunction;
import org.opensearch.knn.index.VectorDataType;

public class FaissCagra2HnswBinaryIndexTests extends AbstractFaissCagraHnswIndexTests {

    public void testKNNSearchBinary() {
        // Exhaustive search test
        doTestKNNSearch(true, VectorDataType.BINARY, KNNVectorSimilarityFunction.HAMMING);

        // ANN search test
        doTestKNNSearch(false, VectorDataType.BINARY, KNNVectorSimilarityFunction.HAMMING);
    }

    public void testLoadVectors() {
        doTestLoadVectors(VectorDataType.BINARY, FIRST_VECTOR, LAST_VECTOR);
    }

    @Override
    protected String getBinaryDataRelativePath() {
        return "data/memoryoptsearch/faiss_cagra2_flat_binary_300_vectors_768_dims.bin";
    }

    private static final byte[] FIRST_VECTOR = new byte[] {
        -12,
        125,
        44,
        -87,
        117,
        28,
        -78,
        -98,
        113,
        118,
        -105,
        -21,
        14,
        -41,
        -108,
        3,
        -104,
        88,
        22,
        -56,
        -72,
        -25,
        -31,
        24,
        35,
        67,
        -16,
        125,
        -32,
        36,
        -18,
        -97,
        88,
        84,
        76,
        98,
        87,
        57,
        96,
        83,
        -101,
        5,
        78,
        34,
        -14,
        -50,
        -8,
        -79,
        -64,
        99,
        -33,
        -94,
        -63,
        -83,
        -8,
        11,
        -31,
        90,
        81,
        -107,
        76,
        115,
        124,
        -12,
        -52,
        117,
        -69,
        -118,
        -23,
        -69,
        30,
        -7,
        -75,
        -71,
        52,
        25,
        115,
        68,
        -111,
        -12,
        89,
        -87,
        -2,
        -115,
        -92,
        20,
        -118,
        -10,
        3,
        119,
        -65,
        101,
        -94,
        16,
        20,
        88, };

    private static final byte[] LAST_VECTOR = new byte[] {
        -31,
        -48,
        -44,
        -79,
        68,
        -31,
        43,
        79,
        -115,
        -38,
        10,
        -61,
        -47,
        9,
        -32,
        -128,
        83,
        -64,
        -121,
        94,
        107,
        -15,
        44,
        -8,
        -10,
        41,
        11,
        -38,
        65,
        113,
        33,
        95,
        -86,
        -30,
        -64,
        -77,
        -50,
        -66,
        -121,
        104,
        84,
        -42,
        -73,
        68,
        -82,
        10,
        54,
        -123,
        -14,
        -91,
        -111,
        55,
        -92,
        -99,
        -77,
        32,
        115,
        -21,
        -66,
        -29,
        -71,
        32,
        64,
        22,
        10,
        42,
        -117,
        -17,
        -109,
        -31,
        41,
        39,
        -66,
        35,
        -57,
        3,
        -93,
        109,
        -85,
        54,
        -115,
        71,
        -31,
        30,
        76,
        107,
        15,
        -68,
        46,
        -23,
        87,
        -51,
        6,
        -22,
        -6,
        -82, };
}
