From d700d93d5efda7349b90f6f0b2373580ced8097d Mon Sep 17 00:00:00 2001
From: Tejas Shah <shatejas@amazon.com>
Date: Mon, 27 May 2024 22:02:12 -0700
Subject: [PATCH] Adds ability to pass ef parameter in the query for hnsw

It defaults to index ef_ value if its not type HNSWQuery
---
 similarity_search/include/hnswquery.h         | 37 +++++++++++++++++++
 similarity_search/include/method/hnsw.h       |  1 +
 similarity_search/include/space.h             |  4 ++
 similarity_search/src/hnswquery.cc            | 32 ++++++++++++++++
 similarity_search/src/method/hnsw.cc          | 28 +++++++++-----
 .../src/method/hnsw_distfunc_opt.cc           | 12 +++---
 6 files changed, 100 insertions(+), 14 deletions(-)
 create mode 100644 similarity_search/include/hnswquery.h
 create mode 100644 similarity_search/src/hnswquery.cc

diff --git a/similarity_search/include/hnswquery.h b/similarity_search/include/hnswquery.h
new file mode 100644
index 0000000..a4f65ac
--- /dev/null
+++ b/similarity_search/include/hnswquery.h
@@ -0,0 +1,37 @@
+/**
+ * Non-metric Space Library
+ *
+ * Main developers: Bilegsaikhan Naidan, Leonid Boytsov, Yury Malkov, Ben Frederickson, David Novak
+ *
+ * For the complete list of contributors and further details see:
+ * https://github.com/nmslib/nmslib
+ *
+ * Copyright (c) 2013-2018
+ *
+ * This code is released under the
+ * Apache License Version 2.0 http://www.apache.org/licenses/.
+ *
+ */
+
+#ifndef HNSWQUERY_H
+#define HNSWQUERY_H
+#include "global.h"
+#include "knnquery.h"
+
+namespace similarity {
+
+template<typename dist_t>
+class HNSWQuery : public KNNQuery<dist_t> {
+public:
+    ~HNSWQuery();
+    HNSWQuery(const Space<dist_t>& space, const Object *query_object, unsigned K, unsigned ef = 100, float eps = 0);
+
+    unsigned getEf() { return ef_; }
+
+protected:
+    unsigned ef_;
+};
+
+}
+
+#endif //HNSWQUERY_H
diff --git a/similarity_search/include/method/hnsw.h b/similarity_search/include/method/hnsw.h
index 57d99d0..e6dcea7 100644
--- a/similarity_search/include/method/hnsw.h
+++ b/similarity_search/include/method/hnsw.h
@@ -474,6 +474,7 @@ namespace similarity {
         void baseSearchAlgorithmV1Merge(KNNQuery<dist_t> *query);
         void SearchOld(KNNQuery<dist_t> *query, bool normalize);
         void SearchV1Merge(KNNQuery<dist_t> *query, bool normalize);
+        size_t extractEf(KNNQuery<dist_t> *query, size_t defaultEf) const;
 
         int getRandomLevel(double revSize)
         {
diff --git a/similarity_search/include/space.h b/similarity_search/include/space.h
index fedad46..a0e9ea9 100644
--- a/similarity_search/include/space.h
+++ b/similarity_search/include/space.h
@@ -63,6 +63,9 @@ class Query;
 template <typename dist_t>
 class KNNQuery;
 
+    template <typename dist_t>
+class HNSWQuery;
+
 template <typename dist_t>
 class RangeQuery;
 
@@ -263,6 +266,7 @@ class Space {
   friend class Query<dist_t>;
   friend class RangeQuery<dist_t>;
   friend class KNNQuery<dist_t>;
+  friend class HNSWQuery<dist_t>;
   friend class Experiments<dist_t>;
   /* 
    * This function is private, but it will be accessible by the friend class Query
diff --git a/similarity_search/src/hnswquery.cc b/similarity_search/src/hnswquery.cc
new file mode 100644
index 0000000..4ee7b38
--- /dev/null
+++ b/similarity_search/src/hnswquery.cc
@@ -0,0 +1,32 @@
+/**
+* Non-metric Space Library
+ *
+ * Main developers: Bilegsaikhan Naidan, Leonid Boytsov, Yury Malkov, Ben Frederickson, David Novak
+ *
+ * For the complete list of contributors and further details see:
+ * https://github.com/nmslib/nmslib
+ *
+ * Copyright (c) 2013-2018
+ *
+ * This code is released under the
+ * Apache License Version 2.0 http://www.apache.org/licenses/.
+ *
+ */
+
+#include "hnswquery.h"
+
+namespace similarity {
+
+template<typename dist_t>
+HNSWQuery<dist_t>::HNSWQuery(const Space<dist_t> &space, const Object* query_object, const unsigned K, unsigned ef, float eps)
+    : KNNQuery<dist_t>(space, query_object, K, eps),
+      ef_(ef) {
+}
+
+template <typename dist_t>
+HNSWQuery<dist_t>::~HNSWQuery() = default;
+
+template class HNSWQuery<float>;
+template class HNSWQuery<int>;
+template class HNSWQuery<short int>;
+}
diff --git a/similarity_search/src/method/hnsw.cc b/similarity_search/src/method/hnsw.cc
index 35b372c..69ee9e4 100644
--- a/similarity_search/src/method/hnsw.cc
+++ b/similarity_search/src/method/hnsw.cc
@@ -46,6 +46,7 @@
 #include <typeinfo>
 #include <vector>
 
+#include "hnswquery.h"
 #include "sort_arr_bi.h"
 #define MERGE_BUFFER_ALGO_SWITCH_THRESHOLD 100
 
@@ -101,9 +102,16 @@ namespace similarity {
         return nullptr;
     }
 
+    template <typename dist_t>
+    size_t Hnsw<dist_t>::extractEf(KNNQuery<dist_t>* searchQuery, size_t defaultEf) const {
+        auto* hnswQueryPtr = dynamic_cast<HNSWQuery<dist_t>*>(searchQuery);
+        if (hnswQueryPtr) {
+            return hnswQueryPtr->getEf();
+        }
+        return defaultEf;
+    }
 
-
-// This is the counter to keep the size of neighborhood information (for one node)
+    // This is the counter to keep the size of neighborhood information (for one node)
     // TODO Can this one overflow? I really doubt
     typedef uint32_t SIZEMASS_TYPE;
 
@@ -718,10 +726,11 @@ namespace similarity {
     void
     Hnsw<dist_t>::Search(KNNQuery<dist_t> *query, IdType) const
     {
+        size_t ef = this->extractEf(query, ef_);
         if (this->data_.empty() && this->data_rearranged_.empty()) {
           return;
         }
-        bool useOld = searchAlgoType_ == kOld || (searchAlgoType_ == kHybrid && ef_ >= 1000);
+        bool useOld = searchAlgoType_ == kOld || (searchAlgoType_ == kHybrid && ef >= 1000);
         // cout << "Ef = " << ef_ << " use old = " << useOld << endl;
         switch (searchMethod_) {
         case 0:
@@ -1148,6 +1157,7 @@ namespace similarity {
                 PREFETCH((char *)(massVisited + (*iter)->getId()), _MM_HINT_T0);
             }
             // calculate distance to each neighbor
+            size_t ef = this->extractEf(query, ef_);
             for (auto iter = neighbor.begin(); iter != neighbor.end(); ++iter) {
                 curId = (*iter)->getId();
 
@@ -1155,12 +1165,12 @@ namespace similarity {
                     massVisited[curId] = currentV;
                     currObj = (*iter)->getData();
                     d = query->DistanceObjLeft(currObj);
-                    if (closestDistQueue1.top().getDistance() > d || closestDistQueue1.size() < ef_) {
+                    if (closestDistQueue1.top().getDistance() > d || closestDistQueue1.size() < ef) {
                         {
                             query->CheckAndAddToResult(d, currObj);
                             candidateQueue.emplace(d, *iter);
                             closestDistQueue1.emplace(d, *iter);
-                            if (closestDistQueue1.size() > ef_) {
+                            if (closestDistQueue1.size() > ef) {
                                 closestDistQueue1.pop();
                             }
                         }
@@ -1185,6 +1195,7 @@ namespace similarity {
 
         const Object *currObj = provider->getData();
 
+            size_t ef = this->extractEf(query, ef_);
         dist_t d = query->DistanceObjLeft(currObj);
         dist_t curdist = d;
         HnswNode *curNode = provider;
@@ -1209,7 +1220,7 @@ namespace similarity {
             }
         }
 
-        SortArrBI<dist_t, HnswNode *> sortedArr(max<size_t>(ef_, query->GetK()));
+        SortArrBI<dist_t, HnswNode *> sortedArr(max<size_t>(ef, query->GetK()));
         sortedArr.push_unsorted_grow(curdist, curNode);
 
         int_fast32_t currElem = 0;
@@ -1225,8 +1236,7 @@ namespace similarity {
         // PHASE TWO OF THE SEARCH
         // Extraction of the neighborhood to find k nearest neighbors.
         ////////////////////////////////////////////////////////////////////////////////
-
-        while (currElem < min(sortedArr.size(), ef_)) {
+        while (currElem < min(sortedArr.size(), ef)) {
             auto &e = queueData[currElem];
             CHECK(!e.used);
             e.used = true;
@@ -1255,7 +1265,7 @@ namespace similarity {
                     currObj = (*iter)->getData();
                     d = query->DistanceObjLeft(currObj);
 
-                    if (d < topKey || sortedArr.size() < ef_) {
+                    if (d < topKey || sortedArr.size() < ef) {
                         CHECK_MSG(itemBuff.size() > itemQty,
                                   "Perhaps a bug: buffer size is not enough " + 
                                   ConvertToString(itemQty) + " >= " + ConvertToString(itemBuff.size()));
diff --git a/similarity_search/src/method/hnsw_distfunc_opt.cc b/similarity_search/src/method/hnsw_distfunc_opt.cc
index 5c219cd..1913936 100644
--- a/similarity_search/src/method/hnsw_distfunc_opt.cc
+++ b/similarity_search/src/method/hnsw_distfunc_opt.cc
@@ -120,6 +120,7 @@ namespace similarity {
             PREFETCH(data_level0_memory_ + (*(data + 1)) * memoryPerObject_ + offsetData_, _MM_HINT_T0);
             PREFETCH((char *)(data + 2), _MM_HINT_T0);
 
+            size_t ef = this->extractEf(query, ef_);
             for (int j = 1; j <= size; j++) {
                 int tnum = *(data + j);
                 PREFETCH((char *)(massVisited + *(data + j + 1)), _MM_HINT_T0);
@@ -131,7 +132,7 @@ namespace similarity {
                     massVisited[tnum] = currentV;
                     char *currObj1 = (data_level0_memory_ + tnum * memoryPerObject_ + offsetData_);
                     dist_t d = (fstdistfunc_(pVectq, (float *)(currObj1 + 16), qty, TmpRes));
-                    if (closestDistQueuei.top().getDistance() > d || closestDistQueuei.size() < ef_) {
+                    if (closestDistQueuei.top().getDistance() > d || closestDistQueuei.size() < ef) {
                         candidateQueuei.emplace(-d, tnum);
                         PREFETCH(data_level0_memory_ + candidateQueuei.top().element * memoryPerObject_ + offsetLevel0_,
                                      _MM_HINT_T0);
@@ -139,7 +140,7 @@ namespace similarity {
                         query->CheckAndAddToResult(d, data_rearranged_[tnum]);
                         closestDistQueuei.emplace(d, tnum);
 
-                        if (closestDistQueuei.size() > ef_) {
+                        if (closestDistQueuei.size() > ef) {
                             closestDistQueuei.pop();
                         }
                     }
@@ -153,6 +154,7 @@ namespace similarity {
     void
     Hnsw<dist_t>::SearchV1Merge(KNNQuery<dist_t> *query, bool normalize)
     {
+        size_t ef = this->extractEf(query, ef_);
         float *pVectq = (float *)((char *)query->QueryObject()->data());
         TMP_RES_ARRAY(TmpRes);
         size_t qty = query->QueryObject()->datalength() >> 2;
@@ -197,7 +199,7 @@ namespace similarity {
             }
         }
 
-        SortArrBI<dist_t, int> sortedArr(max<size_t>(ef_, query->GetK()));
+        SortArrBI<dist_t, int> sortedArr(max<size_t>(ef, query->GetK()));
         sortedArr.push_unsorted_grow(curdist, curNodeNum);
 
         int_fast32_t currElem = 0;
@@ -208,7 +210,7 @@ namespace similarity {
 
         massVisited[curNodeNum] = currentV;
 
-        while (currElem < min(sortedArr.size(), ef_)) {
+        while (currElem < min(sortedArr.size(), ef)) {
             auto &e = queueData[currElem];
             CHECK(!e.used);
             e.used = true;
@@ -237,7 +239,7 @@ namespace similarity {
                     char *currObj1 = (data_level0_memory_ + tnum * memoryPerObject_ + offsetData_);
                     dist_t d = (fstdistfunc_(pVectq, (float *)(currObj1 + 16), qty, TmpRes));
 
-                    if (d < topKey || sortedArr.size() < ef_) {
+                    if (d < topKey || sortedArr.size() < ef) {
                         CHECK_MSG(itemBuff.size() > itemQty,
                                   "Perhaps a bug: buffer size is not enough " + 
                                   ConvertToString(itemQty) + " >= " + ConvertToString(itemBuff.size()));
-- 
2.44.0

